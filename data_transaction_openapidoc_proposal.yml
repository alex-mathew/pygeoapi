components:
  parameters:
    f:
      description: The optional f parameter indicates the output format which the
        server shall provide as part of the response document.  The default format
        is GeoJSON.
      explode: false
      in: query
      name: f
      required: false
      schema:
        default: json
        enum:
        - json
        - html
        - jsonld
        type: string
      style: form
    sortby:
      description: The optional sortby parameter indicates the sort property and order
        on which the server shall present results in the response document using the
        convention `sortby=PROPERTY:X`, where `PROPERTY` is the sort property and
        `X` is the sort order (`A` is ascending, `D` is descending). Sorting by multiple
        properties is supported by providing a comma-separated list.
      explode: false
      in: query
      name: sortby
      required: false
      schema:
        type: string
      style: form
    startindex:
      description: The optional startindex parameter indicates the index within the
        result set from which the server shall begin presenting results in the response
        document.  The first element has an index of 0 (default).
      explode: false
      in: query
      name: startindex
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
  responses:
    '200':
      description: successful operation
    default:
      content:
        application/json:
          schema:
            $ref: https://raw.githubusercontent.com/opengeospatial/wps-rest-binding/master/core/openapi/schemas/exception.yaml
      description: Unexpected error
  schemas:
    nameValuePairObj:
      properties:
        name:
          type: string
        value:
          oneOf:
          - type: string
          - type: object
      type: object
info:
  contact:
    email: you@example.org
    name: Organization Name
    url: https://pygeoapi.io
  description: pygeoapi provides an API to geospatial data
  license:
    name: CC-BY 4.0 license
    url: https://creativecommons.org/licenses/by/4.0/
  termsOfService: https://creativecommons.org/licenses/by/4.0/
  title: pygeoapi default instance
  version: 3.0.2
  x-keywords:
  - geospatial
  - data
  - api
openapi: 3.0.2
paths:
  /:
    get:
      description: Landing page
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/LandingPage
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Landing page
      tags:
      - server
  /collections:
    get:
      description: Collections
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collections
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Collections
      tags:
      - server
  /collections/lakes:
    get:
      description: lakes of the world, public domain
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get collection metadata
      tags:
      - lakes
  /collections/lakes/items:
    get:
      description: lakes of the world, public domain
      parameters:
      - &id001
        description: The optional f parameter indicates the output format which the
          server shall provide as part of the response document.  The default format
          is GeoJSON.
        explode: false
        in: query
        name: f
        required: false
        schema:
          default: json
          enum:
          - json
          - html
          - jsonld
          - csv
          type: string
        style: form
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit
      - $ref: '#/components/parameters/sortby'
      - $ref: '#/components/parameters/startindex'
      - explode: false
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: scalerank
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: name_alt
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: admin
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: featureclass
        required: false
        schema:
          type: string
        style: form
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes items
      tags:
      - lakes
    post:
      description: lakes of the world, public domain
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/schemas/featureGeoJSON
        required: true
      responses:
        201:
          description: Created Large Lakes item
          headers:
            Location:
              schema:
                type: string
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Create Large Lakes item
      tags:
      - lakes
  /collections/lakes/items/{featureId}:
    delete:
      description: lakes of the world, public domain
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Delete Large Lakes item by id
      tags:
      - lakes
    get:
      description: lakes of the world, public domain
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes item by id
      tags:
      - lakes
    patch:
      description: lakes of the world, public domain
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      requestBody:
        content:
          application/json:
            schema:
              properties:
                add:
                  items:
                    $ref: '#/components/schemas/nameValuePairObj'
                  type: array
                modify:
                  items:
                    $ref: '#/components/schemas/nameValuePairObj'
                  type: array
                remove:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        200:
          content:
            application/geo+json:
              schema:
                $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/schemas/featureGeoJSON
          description: Modified  Large Lakes item
          headers:
            Location:
              schema:
                type: string
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Update Large Lakes item by id
      tags:
      - lakes
    put:
      description: lakes of the world, public domain
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/schemas/featureGeoJSON
        required: true
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Replace Large Lakes item by id
      tags:
      - lakes
  /collections/lakes/queryables:
    get:
      description: lakes of the world, public domain
      parameters:
      - *id001
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Large Lakes queryables
      tags:
      - lakes
  /collections/obs:
    get:
      description: My cool observations
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Collection
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get collection metadata
      tags:
      - obs
  /collections/obs/items:
    get:
      description: My cool observations
      parameters:
      - *id001
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/bbox
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/limit
      - $ref: '#/components/parameters/sortby'
      - $ref: '#/components/parameters/startindex'
      - explode: false
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: stn_id
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: datetime
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: value
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: lat
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: query
        name: long
        required: false
        schema:
          type: string
        style: form
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations items
      tags:
      - obs
    post:
      description: My cool observations
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/schemas/featureGeoJSON
        required: true
      responses:
        201:
          description: Created Observations item
          headers:
            Location:
              schema:
                type: string
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Create Observations item
      tags:
      - obs
  /collections/obs/items/{featureId}:
    delete:
      description: lakes of the world, public domain
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Delete Observations item by id
      tags:
      - obs
    get:
      description: My cool observations
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Feature
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations item by id
      tags:
      - obs
    patch:
      description: My cool observations
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      requestBody:
        content:
          application/json:
            schema:
              properties:
                add:
                  items:
                    $ref: '#/components/schemas/nameValuePairObj'
                  type: array
                modify:
                  items:
                    $ref: '#/components/schemas/nameValuePairObj'
                  type: array
                remove:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        200:
          content:
            application/geo+json:
              schema:
                $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/schemas/featureGeoJSON
          description: Modified  Observations item
          headers:
            Location:
              schema:
                type: string
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Update Observations item by id
      tags:
      - obs
    put:
      description: lakes of the world, public domain
      parameters:
      - $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/parameters/featureId
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/schemas/featureGeoJSON
        required: true
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Replace Observations item by id
      tags:
      - obs
  /collections/obs/queryables:
    get:
      description: My cool observations
      parameters:
      - *id001
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/Features
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        404:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/NotFound
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: Get Observations queryables
      tags:
      - obs
  /conformance:
    get:
      description: API conformance definition
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ConformanceDeclaration
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        500:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/ServerError
      summary: API conformance definition
      tags:
      - server
  /openapi:
    get:
      description: This document
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml#/components/responses/InvalidParameter
        default:
          $ref: '#/components/responses/default'
      summary: This document
      tags:
      - server
  /processes:
    get:
      description: Processes
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: Processes
      tags:
      - server
  /processes/hello-world:
    get:
      description: Hello World process
      parameters:
      - $ref: '#/components/parameters/f'
      responses:
        200:
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: Get process metadata
      tags:
      - hello-world
  /processes/hello-world/jobs:
    get:
      description: Hello World process
      responses:
        200:
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: Retrieve job list for process
      tags:
      - hello-world
    post:
      description: Hello World process
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              inputs:
              - id: name
                type: text/plain
                value: hi there
            schema:
              $ref: https://raw.githubusercontent.com/opengeospatial/wps-rest-binding/master/core/openapi/schemas/execute.yaml
        description: Mandatory execute request JSON
        required: true
      responses:
        200:
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: Process Hello World process execution
      tags:
      - hello-world
  /stac:
    get:
      description: SpatioTemporal Asset Catalog
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/default'
      summary: SpatioTemporal Asset Catalog
      tags:
      - stac
servers:
- description: pygeoapi provides an API to geospatial data
  url: http://localhost:5000/
tags:
- description: pygeoapi provides an API to geospatial data
  externalDocs:
    description: information
    url: http://example.org
  name: server
- description: My cool observations
  name: obs
- description: lakes of the world, public domain
  name: lakes
- description: Hello World process
  name: hello-world